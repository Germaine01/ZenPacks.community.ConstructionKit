from Products.ZenModel.RRDDataSource import RRDDataSource
from Products.ZenModel.ZenPackPersistence import ZenPackPersistence
from AccessControl import ClassSecurityInfo, Permissions
from Products.ZenUtils.ZenTales import talesCompile, getEngine
from Products.ZenUtils.Utils import binPath

'''
Args:  classname, datasourcename, zenpackname, eventClass, cycletime, timeout, cmdfile, dpoints, properties,_properties,datasourcename,datasourcename
'''

class %s(ZenPackPersistence, RRDDataSource):
    DATASOURCE = '%s'
    ZENPACKID = '%s'
    sourcetypes = (DATASOURCE,)
    sourcetype = DATASOURCE
    eventClass = '%s'
    cycletime = %s
    timeout = %s
    component = %s
    cmdFile = %s
    provided = %s
    dpoints = %s
    
%s
    _properties = RRDDataSource._properties + (
%s
    )
    
    _relations = RRDDataSource._relations + (
        )
        
    factory_type_information = (
    {
        'immediate_view' : 'edit%s',
        'actions'        :
        (
            { 'id'            : 'edit',
              'name'          : 'Data Source',
              'action'        : 'edit%s',
              'permissions'   : ( Permissions.view, ),
            },
        )
    },
    )

    security = ClassSecurityInfo()

    def __init__(self, id, title=None, buildRelations=True):
        RRDDataSource.__init__(self, id, title, buildRelations)
        self.addDataPoints()
    
    def getDescription(self):
        if self.sourcetype == self.DATASOURCE:
            return self.component
        return RRDDataSource.getDescription(self)
    
    def useZenCommand(self):
        return True
        
%s

    def checkCommandPrefix(self, context, cmd):
    	if self.provided == True:
            return self.getZenPack(context).path('libexec', cmd)
        else:
            return cmd
            
    def addDataPoints(self):
        for p in self.dpoints:
            if not self.datapoints._getOb(p, None):
                self.manage_addRRDDataPoint(p)
    
    def zmanage_editProperties(self, REQUEST=None):
        '''validation, etc'''
        if REQUEST:
            # ensure default datapoint didn't go away
            self.addDataPoints()
            # and eventClass
            if not REQUEST.form.get('eventClass', None):
                REQUEST.form['eventClass'] = self.__class__.eventClass
        return RRDDataSource.zmanage_editProperties(self, REQUEST)

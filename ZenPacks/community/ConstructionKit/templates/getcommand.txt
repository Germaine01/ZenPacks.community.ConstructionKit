    def getCommand(self, context):
        '''
            generate the plugin command
        '''
        cmd = binPath(self.cmdFile)
        if self.provided == False:
            cmd = binPath(self.cmdFile)
        else:
            cmd = self.cmdFile
        parts = [cmd]
        endargs = ''
        props = getattr(context,'_properties')
        for p in props:
            ptype = p['type']
            switch = p['switch']
            value = getattr(context,p['id'])
            if value is not None and len(str(value)) > 0:
                if switch != 'None':
                    if ptype == 'boolean':
                        if value == True:
                            parts.append('%s' % switch)
                    elif ptype == 'list' or ptype == 'lines':
                        bySpace = value.split(' ')
                        byNewline = value.split('\n')
                        if len(bySpace) > len(byNewline):
                            endargs = '%s \"%s\"' % (switch, ' '.join(bySpace))
                        else:
                            endargs = '%s \"%s\"' % (switch, ' '.join(byNewline))
                    else:
                        if len(str(value)) > 0:
                            parts.append('%s \"%s\" ' % (switch, str(value)))
        parts.append(endargs)
        cmd = ' '.join(parts)
        cmd = RRDDataSource.getCommand(self, context, cmd)
        return cmd
